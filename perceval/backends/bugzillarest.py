# -*- coding: utf-8 -*-
#
# Copyright (C) 2016 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#     Alvaro del Castillo <acs@bitergia.com>
#

import json
import logging
import os.path

import dateutil.tz

import requests

from ..backend import Backend, BackendCommand, metadata
from ..cache import Cache
from ..errors import CacheError
from ..utils import (DEFAULT_DATETIME,
                     datetime_to_utc,
                     str_to_datetime,
                     urljoin)


logger = logging.getLogger(__name__)


class BugzillaRest(Backend):
    """BugzillaRest backend for Perceval.

    This class retrieves the bugs from a
    BugzillaRest site. To initialize this class the
    URL must be provided.

    :param url: BugzillaRest url
    :param cache: cache object to store raw data
    :param origin: identifier of the repository; when `None` or an
        empty string are given, it will be set to `url` value
    """
    version = '0.1.0'

    def __init__(self, url, cache=None, origin=None):
        origin = origin if origin else url

        super().__init__(origin, cache=cache)
        self.url = url
        self.client = BugzillaRestClient(url)

    @metadata
    def fetch(self):
        """Fetch the bugs from the url.

        The method retrieves, from a BugzillaRest url, the
        bugs updated since the given date.

        :returns: a generator of bugs
        """

        logger.info("Looking for bugs at url '%s'", self.url)

        self._purge_cache_queue()
        nbugs = 0  # number of bugs processed
        offset = 0

        while True:
            raw_bugs = self.client.get_bugs(offset)
            self._push_cache_queue(raw_bugs)
            self._flush_cache_queue()
            bugs = json.loads(raw_bugs)['bugs']
            if len(bugs) == 0:
                break
            offset += len(bugs)
            for bug in bugs:
                yield bug
                nbugs += 1

        logger.info("Total number of bugs: %i" % (nbugs))

    @metadata
    def fetch_from_cache(self):
        """Fetch the bugs from the cache.

        :returns: a generator of bugs

        :raises CacheError: raised when an error occurs accessing the
            cache
        """
        if not self.cache:
            raise CacheError(cause="cache instance was not provided")

        cache_items = self.cache.retrieve()

        for items in cache_items:
            bugs = json.loads(items)['bugs']
            for bug in bugs:
                yield bug

    @staticmethod
    def metadata_id(item):
        """Extracts the identifier from a Build item."""
        return str(item['id'])

    @staticmethod
    def metadata_updated_on(item):
        """Extracts the update time from a BugzillaRest item.

        The timestamp is extracted from 'timestamp' field.
        This date is a UNIX timestamp but needs to be converted to
        a float value.

        :param item: item generated by the backend

        :returns: a UNIX timestamp
        """
        ts = item['last_change_time']
        ts = str_to_datetime(ts)
        ts = ts.replace(tzinfo=dateutil.tz.tzutc())

        return ts.timestamp()

class BugzillaRestClient:
    """BugzillaRest API client.

    This class implements a simple client to retrieve bugs from
    projects in a BugzillaRest node.

    :param url: URL of jenkins node: https://bug.opnfv.org/ci

    :raises HTTPError: when an error occurs doing the request
    """

    QUERY_LIMIT = 10  # 10000 is the max number of bugs per query

    def __init__(self, url):
        self.url = url
        self.api = url+"/rest/bug"

    def get_bugs(self, offset):
        """ Retrieve all bugs starting from offset
        """
        # all resolutions except MOVED that should be added later
        resolutions = ["---","FIXED","INVALID","WONTFIX","DUPLICATE","WORKSFORME","INCOMPLETE","SUPPORT","EXPIRED"]
        all_resolutions = ''
        for res in resolutions:
            all_resolutions += "&resolution="+res

        query_url = self.api+"?"+"offset="+str(offset)+"&limit="+str(self.QUERY_LIMIT)+"&order=changeddate"
        query_url += all_resolutions

        req = requests.get(query_url)
        req.raise_for_status()
        return req.text

class BugzillaRestCommand(BackendCommand):
    """Class to run BugzillaRest backend from the command line."""

    def __init__(self, *args):
        super().__init__(*args)
        self.url = self.parsed_args.url
        self.origin = self.parsed_args.origin
        self.outfile = self.parsed_args.outfile

        if not self.parsed_args.no_cache:
            if not self.parsed_args.cache_path:
                base_path = os.path.expanduser('~/.perceval/cache/')
            else:
                base_path = self.parsed_args.cache_path

            cache_path = os.path.join(base_path, self.url)

            cache = Cache(cache_path)

            if self.parsed_args.clean_cache:
                cache.clean()
            else:
                cache.backup()
        else:
            cache = None

        self.backend = BugzillaRest(self.url, cache=cache, origin=self.origin)

    def run(self):
        """Fetch and print the Builds.

        This method runs the backend to fetch the Builds of a given url.
        Builds are converted to JSON objects and printed to the
        defined output.
        """
        if self.parsed_args.fetch_cache:
            bugs = self.backend.fetch_from_cache()
        else:
            bugs = self.backend.fetch()

        try:
            for bug in bugs:
                obj = json.dumps(bug, indent=4, sort_keys=True)
                self.outfile.write(obj)
                self.outfile.write('\n')
        except requests.exceptions.HTTPError as e:
            raise requests.exceptions.HTTPError(str(e.response.json()))
        except IOError as e:
            raise RuntimeError(str(e))
        except Exception as e:
            if self.backend.cache:
                self.backend.cache.recover()
            raise RuntimeError(str(e))

    @classmethod
    def create_argument_parser(cls):
        """Returns the BugzillaRest argument parser."""

        parser = super().create_argument_parser()

        # BugzillaRest options
        group = parser.add_argument_group('BugzillaRest arguments')

        # Required arguments
        parser.add_argument('url',
                            help="URL of the BugzillaRest server")


        return parser
